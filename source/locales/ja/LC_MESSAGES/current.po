# cocoatomo <cocoatomo77@gmail.com>, 2017. #zanata
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-09 10:42+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"PO-Revision-Date: 2017-04-12 10:09-0400\n"
"Last-Translator: cocoatomo <cocoatomo77@gmail.com>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"X-Generator: Zanata 3.9.6\n"
"Plural-Forms: nplurals=1; plural=0\n"

#: ../../current.rst:5
msgid "Tool Recommendations"
msgstr "推奨ツール"

#: ../../current.rst:0
msgid "Page Status"
msgstr "ページの状態"

#: ../../current.rst:7
msgid "Complete"
msgstr "完成"

#: ../../current.rst:0
msgid "Last Reviewed"
msgstr "最終レビュー日付"

#: ../../current.rst:8
msgid "2016-06-24"
msgstr "2016-06-24"

#: ../../current.rst:10
msgid ""
"If you're familiar with Python packaging and installation, and just want to "
"know what tools are currently recommended, then here it is."
msgstr "Pythonでのパッケージングやインストールをよく知っていて、現在どのツールが推奨されるのかだけを知りたいなら、ここがその場所です。"

#: ../../current.rst:15
msgid "Installation Tool Recommendations"
msgstr "推奨のインストールツール"

#: ../../current.rst:17
msgid ""
"Use :ref:`pip` to install Python :term:`packages <Distribution Package>` "
"from :term:`PyPI <Python Package Index (PyPI)>`. [1]_ [2]_ Depending how :"
"ref:`pip` is installed, you may need to also install :ref:`wheel` to get the "
"benefit of wheel caching. [3]_"
msgstr ""
":ref:`pip` を使って :term:`PyPI <Python Package Index (PyPI)>` からPythonの :term:"
"`パッケージ <Distribution Package>` をインストールします。 [1]_ [2]_ :ref:`pip` "
"のインストールのされ方によっては、wheelによるキャッシュの恩恵を受けるために :ref:`wheel` もインストールする必要があるかもしれません。 "
"[3]_"

#: ../../current.rst:22
msgid ""
"Use :ref:`virtualenv`, or `venv`_ to isolate application specific "
"dependencies from a shared Python installation. [4]_"
msgstr ""
":ref:`virtualenv` あるいは `venv` "
"を使って、共用にインストールされているPythonからアプリケーションの特定の依存関係を隔離します。"

#: ../../current.rst:25
msgid ""
"If you're looking for management of fully integrated cross-platform software "
"stacks, consider:"
msgstr ""

#: ../../current.rst:28
msgid ":ref:`buildout`: primarily focused on the web development community"
msgstr ":ref:`buildout`: 主にweb開発コミュニティ向け"

#: ../../current.rst:30
msgid ""
":ref:`spack`, :ref:`hashdist`, or :ref:`conda`: primarily focused on the "
"scientific community."
msgstr ":ref:`spack`, :ref:`hashdist`, :ref:`conda`: 主に科学コミュニティ向け"

#: ../../current.rst:36
msgid "Packaging Tool Recommendations"
msgstr "推奨のパッケージングツール"

#: ../../current.rst:38
msgid ""
"Use :ref:`setuptools` to define projects and create :term:`Source "
"Distributions <Source Distribution (or \"sdist\")>`. [5]_ [6]_"
msgstr ""
":ref:`setuptools` を使ってプロジェクトを定義し、 :term:`ソース配布物 <Source Distribution (or "
"\"sdist\")>` を作成します。 [5]_ [6]_"

#: ../../current.rst:41
msgid ""
"Use the ``bdist_wheel`` :ref:`setuptools` extension available from the :ref:"
"`wheel project <wheel>` to create :term:`wheels <Wheel>`.  This is "
"especially beneficial, if your project contains binary extensions. [7]_"
msgstr ""
":ref:`wheel プロジェクト <wheel>` から入手可能な ``bdist_wheel`` という :ref:`setuptools` "
"拡張を使って、  :term:`wheels <Wheel>` を作成します。\n"
"プロジェクトにバイナリ拡張が含まれる場合は、特に役立ちます。 [7]_"

#: ../../current.rst:45
msgid ""
"Use `twine <https://pypi.python.org/pypi/twine>`_ for uploading "
"distributions to :term:`PyPI <Python Package Index (PyPI)>`."
msgstr ""
"`twine <https://pypi.python.org/pypi/twine>`_ を使って、配布物を :term:`PyPI <Python "
"Package Index (PyPI)>` へアップロードします。"

#: ../../current.rst:51
msgid ""
"There are some cases where you might choose to use ``easy_install`` (from :"
"ref:`setuptools`), e.g. if you need to install from :term:`Eggs <Egg>` "
"(which pip doesn't support).  For a detailed breakdown, see :ref:`pip vs "
"easy_install`."
msgstr ""
"(:ref:`setuptools` の) ``easy_install`` を使う選択をする場合もあります。\n"
"例えば、(pipがサポートしていない) :term:`Eggs <Egg>` でインストールする必要がある場合です。\n"
"詳しいことは :ref:`pip vs easy_install` を参照してください。"

#: ../../current.rst:56
msgid ""
"The acceptance of :pep:`453` means that :ref:`pip` will be available by "
"default in most installations of Python 3.4 or later.  See the :pep:"
"`rationale section <453#rationale>` from :pep:`453` as for why pip was "
"chosen."
msgstr ""

#: ../../current.rst:61
msgid ""
":ref:`get-pip.py <pip:get-pip>` and :ref:`virtualenv` install :ref:`wheel`, "
"whereas :ref:`ensurepip` and :ref:`venv <venv>` do not currently.  Also, the "
"common \"python-pip\" package that's found in various linux distros, does "
"not depend on \"python-wheel\" currently."
msgstr ""

#: ../../current.rst:66
msgid ""
"Beginning with Python 3.4, ``venv`` will create virtualenv environments with "
"``pip`` installed, thereby making it an equal alternative to :ref:"
"`virtualenv`. However, using :ref:`virtualenv` will still be recommended for "
"users that need cross-version consistency."
msgstr ""

#: ../../current.rst:71
msgid ""
"Although you can use pure ``distutils`` for many projects, it does not "
"support defining dependencies on other projects and is missing several "
"convenience utilities for automatically populating distribution metadata "
"correctly that are provided by ``setuptools``. Being outside the standard "
"library, ``setuptools`` also offers a more consistent feature set across "
"different versions of Python, and (unlike ``distutils``), ``setuptools`` "
"will be updated to produce the upcoming \"Metadata 2.0\" standard formats on "
"all supported versions."
msgstr ""

#: ../../current.rst:80
msgid ""
"Even for projects that do choose to use ``distutils``, when :ref:`pip` "
"installs such projects directly from source (rather than installing from a "
"prebuilt :term:`wheel <Wheel>` file), it will actually build your project "
"using :ref:`setuptools` instead."
msgstr ""

#: ../../current.rst:85
msgid ""
"`distribute`_ (a fork of setuptools) was merged back into :ref:`setuptools` "
"in June 2013, thereby making setuptools the default choice for packaging."
msgstr ""

#: ../../current.rst:89
msgid ""
":term:`PyPI <Python Package Index (PyPI)>` currently only allows uploading "
"Windows and Mac OS X wheels, and they should be compatible with the binary "
"installers provided for download from python.org. Enhancements will have to "
"be made to the :pep:`wheel compatibility tagging scheme <425>` before linux "
"wheels will be allowed."
msgstr ""
