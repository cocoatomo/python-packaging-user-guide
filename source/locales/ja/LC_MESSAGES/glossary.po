# 
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-09 10:42+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"Language: ja\n"
"X-Generator: Zanata 3.9.6\n"
"Plural-Forms: nplurals=1; plural=0\n"

#: ../../glossary.rst:4
msgid "Glossary"
msgstr ""

#: ../../glossary.rst:0
msgid "Page Status"
msgstr ""

#: ../../glossary.rst:6
msgid "Complete"
msgstr ""

#: ../../glossary.rst:0
msgid "Last Reviewed"
msgstr ""

#: ../../glossary.rst:7
msgid "2015-09-08"
msgstr ""

#: ../../glossary.rst:12
msgid "Binary Distribution"
msgstr ""

#: ../../glossary.rst:15
msgid ""
"A specific kind of :term:`Built Distribution` that contains compiled "
"extensions."
msgstr ""

#: ../../glossary.rst:18
msgid "Built Distribution"
msgstr ""

#: ../../glossary.rst:21
msgid ""
"A :term:`Distribution <Distribution Package>` format containing files and "
"metadata that only need to be moved to the correct location on the target "
"system, to be installed. :term:`Wheel` is such a format, whereas distutil's :"
"term:`Source Distribution <Source Distribution (or \"sdist\")>` is not, in "
"that it requires a build step before it can be installed.  This format does "
"not imply that python files have to be precompiled (:term:`Wheel` "
"intentionally does not include compiled python files)."
msgstr ""

#: ../../glossary.rst:30
msgid "Distribution Package"
msgstr ""

#: ../../glossary.rst:33
msgid ""
"A versioned archive file that contains Python :term:`packages <Import "
"Package>`, :term:`modules <module>`, and other resource files that are used "
"to distribute a :term:`Release`. The archive file is what an end-user will "
"download from the internet and install."
msgstr ""

#: ../../glossary.rst:38
msgid ""
"A distribution package is more commonly referred to with the single words "
"\"package\" or \"distribution\", but this guide may use the expanded term "
"when more clarity is needed to prevent confusion with an :term:`Import "
"Package` (which is also commonly called a \"package\") or another kind of "
"distribution (e.g. a Linux distribution or the Python language "
"distribution), which are often referred to with the single term "
"\"distribution\"."
msgstr ""

#: ../../glossary.rst:45
msgid "Egg"
msgstr ""

#: ../../glossary.rst:48
msgid ""
"A :term:`Built Distribution` format introduced by :ref:`setuptools`, which "
"is being replaced by :term:`Wheel`.  For details, see `The Internal "
"Structure of Python Eggs <https://setuptools.readthedocs.io/en/latest/"
"formats.html>`_ and `Python Eggs <http://peak.telecommunity.com/DevCenter/"
"PythonEggs>`_"
msgstr ""

#: ../../glossary.rst:53
msgid "Extension Module"
msgstr ""

#: ../../glossary.rst:56
msgid ""
"A :term:`module` written in the low-level language of the Python "
"implementation: C/C++ for Python, Java for Jython. Typically contained in a "
"single dynamically loadable pre-compiled file, e.g.  a shared object (.so) "
"file for Python extensions on Unix, a DLL (given the .pyd extension) for "
"Python extensions on Windows, or a Java class file for Jython extensions."
msgstr ""

#: ../../glossary.rst:63
msgid "Known Good Set (KGS)"
msgstr ""

#: ../../glossary.rst:66
msgid ""
"A set of distributions at specified versions which are compatible with each "
"other. Typically a test suite will be run which passes all tests before a "
"specific set of packages is declared a known good set. This term is commonly "
"used by frameworks and toolkits which are comprised of multiple individual "
"distributions."
msgstr ""

#: ../../glossary.rst:72
msgid "Import Package"
msgstr ""

#: ../../glossary.rst:75
msgid ""
"A Python module which can contain other modules or recursively, other "
"packages."
msgstr ""

#: ../../glossary.rst:78
msgid ""
"An import package is more commonly referred to with the single word "
"\"package\", but this guide will use the expanded term when more clarity is "
"needed to prevent confusion with a :term:`Distribution Package` which is "
"also commonly called a \"package\"."
msgstr ""

#: ../../glossary.rst:82
msgid "Module"
msgstr ""

#: ../../glossary.rst:85
msgid ""
"The basic unit of code reusability in Python, existing in one of two types: :"
"term:`Pure Module`, or :term:`Extension Module`."
msgstr ""

#: ../../glossary.rst:88
msgid "Package Index"
msgstr ""

#: ../../glossary.rst:91
msgid ""
"A repository of distributions with a web interface to automate :term:"
"`package <Distribution Package>` discovery and consumption."
msgstr ""

#: ../../glossary.rst:94
msgid "Project"
msgstr ""

#: ../../glossary.rst:97
msgid ""
"A library, framework, script, plugin, application, or collection of data or "
"other resources, or some combination thereof that is intended to be packaged "
"into a :term:`Distribution <Distribution Package>`."
msgstr ""

#: ../../glossary.rst:101
msgid ""
"Since most projects create :term:`Distributions <Distribution Package>` "
"using :ref:`distutils` or :ref:`setuptools`, another practical way to define "
"projects currently is something that contains a :term:`setup.py` at the root "
"of the project src directory, where \"setup.py\" is the project "
"specification filename used by :ref:`distutils` and :ref:`setuptools`."
msgstr ""

#: ../../glossary.rst:108
msgid ""
"Python projects must have unique names, which are registered on :term:`PyPI "
"<Python Package Index (PyPI)>`. Each project will then contain one or more :"
"term:`Releases <Release>`, and each release may comprise one or more :term:"
"`distributions <Distribution Package>`."
msgstr ""

#: ../../glossary.rst:113
msgid ""
"Note that there is a strong convention to name a project after the name of "
"the package that is imported to run that project. However, this doesn't have "
"to hold true. It's possible to install a distribution from the project 'foo' "
"and have it provide a package importable only as 'bar'."
msgstr ""

#: ../../glossary.rst:119
msgid "Pure Module"
msgstr ""

#: ../../glossary.rst:122
msgid ""
"A :term:`module` written in Python and contained in a single .py file (and "
"possibly associated .pyc and/or .pyo files)."
msgstr ""

#: ../../glossary.rst:125
msgid "Python Packaging Authority (PyPA)"
msgstr ""

#: ../../glossary.rst:128
msgid ""
"PyPA is a working group that maintains many of the relevant projects in "
"Python packaging. They maintain a site at https://www.pypa.io, host projects "
"on `github <https://github.com/pypa>`_ and `bitbucket <https://bitbucket.org/"
"pypa>`_, and discuss issues on the `pypa-dev mailing list <https://groups."
"google.com/forum/#!forum/pypa-dev>`_."
msgstr ""

#: ../../glossary.rst:134
msgid "Python Package Index (PyPI)"
msgstr ""

#: ../../glossary.rst:137
msgid ""
"`PyPI <https://pypi.python.org/pypi>`_ is the default :term:`Package Index` "
"for the Python community. It is open to all Python developers to consume and "
"distribute their distributions."
msgstr ""

#: ../../glossary.rst:140
msgid "Release"
msgstr ""

#: ../../glossary.rst:143
msgid ""
"A snapshot of a :term:`Project` at a particular point in time, denoted by a "
"version identifier."
msgstr ""

#: ../../glossary.rst:146
msgid ""
"Making a release may entail the publishing of multiple :term:`Distributions "
"<Distribution Package>`.  For example, if version 1.0 of a project was "
"released, it could be available in both a source distribution format and a "
"Windows installer distribution format."
msgstr ""

#: ../../glossary.rst:151
msgid "Requirement"
msgstr ""

#: ../../glossary.rst:154
msgid ""
"A specification for a :term:`package <Distribution Package>` to be installed."
"  :ref:`pip`, the :term:`PYPA <Python Packaging Authority (PyPA)>` "
"recommended installer, allows various forms of specification that can all be "
"considered a \"requirement\". For more information, see the :ref:`pip:pip "
"install` reference."
msgstr ""

#: ../../glossary.rst:160
msgid "Requirement Specifier"
msgstr ""

#: ../../glossary.rst:163
msgid ""
"A format used by :ref:`pip` to install packages from a :term:`Package Index`."
" For an EBNF diagram of the format, see the `pkg_resources.Requirement "
"<https://setuptools.readthedocs.io/en/latest/pkg_resources.html#requirement-"
"objects>`_ entry in the :ref:`setuptools` docs. For example, \"foo>=1.3\" is "
"a requirement specifier, where \"foo\" is the project name, and the \">=1."
"3\" portion is the :term:`Version Specifier`"
msgstr ""

#: ../../glossary.rst:170
msgid "Requirements File"
msgstr ""

#: ../../glossary.rst:173
msgid ""
"A file containing a list of :term:`Requirements <Requirement>` that can be "
"installed using :ref:`pip`. For more information, see the :ref:`pip` docs on "
":ref:`pip:Requirements Files`."
msgstr ""

#: ../../glossary.rst:177
msgid "setup.py"
msgstr ""

#: ../../glossary.rst:180
msgid ""
"The project specification file for :ref:`distutils` and :ref:`setuptools`."
msgstr ""

#: ../../glossary.rst:182
msgid "Source Archive"
msgstr ""

#: ../../glossary.rst:185
msgid ""
"An archive containing the raw source code for a :term:`Release`, prior to "
"creation of an :term:`Source Distribution <Source Distribution (or "
"\"sdist\")>` or :term:`Built Distribution`."
msgstr ""

#: ../../glossary.rst:189
msgid "Source Distribution (or \"sdist\")"
msgstr ""

#: ../../glossary.rst:192
msgid ""
"A :term:`distribution <Distribution Package>` format (usually generated "
"using ``python setup.py sdist``) that provides metadata and the essential "
"source files needed for installing by a tool like :ref:`pip`, or for "
"generating a :term:`Built Distribution`."
msgstr ""

#: ../../glossary.rst:197
msgid "System Package"
msgstr ""

#: ../../glossary.rst:200
msgid ""
"A package provided in a format native to the operating system, e.g. an rpm "
"or dpkg file."
msgstr ""

#: ../../glossary.rst:203
msgid "Version Specifier"
msgstr ""

#: ../../glossary.rst:206
msgid ""
"The version component of a :term:`Requirement Specifier`. For example, the "
"\">=1.3\" portion of \"foo>=1.3\".  :pep:`440` contains a :pep:`full "
"specification <440#version-specifiers>` of the specifiers that Python "
"packaging currently supports.  Support for PEP440 was implemented in :ref:"
"`setuptools` v8.0 and :ref:`pip` v6.0."
msgstr ""

#: ../../glossary.rst:212
msgid "Virtual Environment"
msgstr ""

#: ../../glossary.rst:215
msgid ""
"An isolated Python environment that allows packages to be installed for use "
"by a particular application, rather than being installed system wide. For "
"more information, see the section on :ref:`Creating and using Virtual "
"Environments`."
msgstr ""

#: ../../glossary.rst:219
msgid "Wheel"
msgstr ""

#: ../../glossary.rst:222
msgid ""
"A :term:`Built Distribution` format introduced by :pep:`427`, which is "
"intended to replace the :term:`Egg` format.  Wheel is currently supported by "
":ref:`pip`."
msgstr ""

#: ../../glossary.rst:225
msgid "Working Set"
msgstr ""

#: ../../glossary.rst:228
msgid ""
"A collection of :term:`distributions <Distribution Package>` available for "
"importing. These are the distributions that are on the `sys.path` variable. "
"At most, one :term:`Distribution <Distribution Package>` for a project is "
"possible in a working set."
msgstr ""

