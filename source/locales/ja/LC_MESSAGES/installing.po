# cocoatomo <cocoatomo77@gmail.com>, 2017. #zanata
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 06:57+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"PO-Revision-Date: 2017-05-28 08:12+0000\n"
"Last-Translator: cocoatomo <cocoatomo77@gmail.com>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"X-Generator: Zanata 4.6.2\n"
"Plural-Forms: nplurals=1; plural=0\n"

#: ../../installing.rst:3
msgid "Installing Packages"
msgstr "パッケージのインストール"

#: ../../installing.rst:0
msgid "Page Status"
msgstr "ページの状態"

#: ../../installing.rst:5
msgid "Complete"
msgstr "完了"

#: ../../installing.rst:0
msgid "Last Reviewed"
msgstr "最終レビュー日付"

#: ../../installing.rst:6
msgid "2016-06-24"
msgstr "2016-06-24"

#: ../../installing.rst:8
msgid ""
"This section covers the basics of how to install Python :term:`packages "
"<Distribution Package>`."
msgstr ""
"この節ではPythonの :term:`パッケージ <Distribution Package>` をインストールする方法の基礎を扱います。"

#: ../../installing.rst:11
msgid ""
"It's important to note that the term \"package\" in this context is being "
"used as a synonym for a :term:`distribution <Distribution Package>` (i.e. a "
"bundle of software to be installed), not to refer to the kind of :term:"
"`package <Import Package>` that you import in your Python source code (i.e. "
"a container of modules). It is common in the Python community to refer to a :"
"term:`distribution <Distribution Package>` using the term \"package\".  "
"Using the term \"distribution\" is often not preferred, because it can "
"easily be confused with a Linux distribution, or another larger software "
"distribution like Python itself."
msgstr ""
"重要な注意点は、この文脈での \"パッケージ\" という用語は :term:`配布物 <Distribution Package>` "
"の同義語として使われるもので、PythonソースコードでインポートするPythonの :term:`パッケージ <Import Package>` "
"のようなものを指してはいないことです。\n"
"Pythonコミュニティでは、\"パッケージ\"という用語で :term:`配布物 <Distribution Package>` "
"を指し示すのが一般的です。\n"
"\"配布物\"という用語を使うのは好ましくなく、なぜならLinuxディストリビューションや、Pythonそのもののようなより大きなソフトウェア配布物と混同しやすくなるからです。"

#: ../../installing.rst:28
msgid "Requirements for Installing Packages"
msgstr "パッケージをインストールするための必要条件"

#: ../../installing.rst:30
msgid ""
"This section describes the steps to follow before installing other Python "
"packages."
msgstr "この節では、Pythonパッケージをインストールする前に踏むべき手順について解説します。"

#: ../../installing.rst:34
msgid "Install pip, setuptools, and wheel"
msgstr "pip、setuptools、wheelのインストール"

#: ../../installing.rst:36
msgid ""
"If you have Python 2 >=2.7.9 or Python 3 >=3.4 installed from `python.org "
"<https://www.python.org>`_, you will already have :ref:`pip` and :ref:"
"`setuptools`, but will need to upgrade to the latest version:"
msgstr ""
"`python.org <https://www.python.org>`_ からインストールした2.7.9以降のPython 2もしくは3."
"4以降のPython 3がある場合は、既に :ref:`pip` と :ref:`setuptools` "
"を手に入れていますが、最新版にアップグレードする必要があります:"

#: ../../installing.rst:40
msgid "On Linux or OS X:"
msgstr "LinuxあるいはOS X:"

#: ../../installing.rst:47
msgid "On Windows:"
msgstr "Windows:"

#: ../../installing.rst:53
msgid ""
"If you're using a Python install on Linux that's managed by the system "
"package manager (e.g \"yum\", \"apt-get\" etc...), and you want to use the "
"system package manager to install or upgrade pip, then see :ref:`Installing "
"pip/setuptools/wheel with Linux Package Managers`"
msgstr ""

#: ../../installing.rst:58
msgid "Otherwise:"
msgstr ""

#: ../../installing.rst:60
msgid ""
"Securely Download `get-pip.py <https://bootstrap.pypa.io/get-pip.py>`_ [1]_"
msgstr ""

#: ../../installing.rst:63
msgid ""
"Run ``python get-pip.py``. [2]_  This will install or upgrade pip. "
"Additionally, it will install :ref:`setuptools` and :ref:`wheel` if they're "
"not installed already."
msgstr ""

#: ../../installing.rst:69
msgid ""
"Be cautious if you're using a Python install that's managed by your "
"operating system or another package manager. get-pip.py does not coordinate "
"with those tools, and may leave your system in an inconsistent state. You "
"can use ``python get-pip.py --prefix=/usr/local/`` to install in ``/usr/"
"local`` which is designed for locally-installed software."
msgstr ""

#: ../../installing.rst:78
msgid "Optionally, Create a virtual environment"
msgstr ""

#: ../../installing.rst:80
msgid ""
"See :ref:`section below <Creating and using Virtual Environments>` for "
"details, but here's the basic commands:"
msgstr ""

#: ../../installing.rst:83
#: ../../installing.rst:137
msgid "Using :ref:`virtualenv`:"
msgstr ""

#: ../../installing.rst:91
msgid "Using `venv`_: [3]_"
msgstr ""

#: ../../installing.rst:102
msgid "Creating Virtual Environments"
msgstr ""

#: ../../installing.rst:104
msgid ""
"Python \"Virtual Environments\" allow Python :term:`packages <Distribution "
"Package>` to be installed in an isolated location for a particular "
"application, rather than being installed globally."
msgstr ""

#: ../../installing.rst:108
msgid ""
"Imagine you have an application that needs version 1 of LibFoo, but another "
"application requires version 2. How can you use both these applications? If "
"you install everything into /usr/lib/python2.7/site-packages (or whatever "
"your platform’s standard location is), it’s easy to end up in a situation "
"where you unintentionally upgrade an application that shouldn’t be upgraded."
msgstr ""

#: ../../installing.rst:114
msgid ""
"Or more generally, what if you want to install an application and leave it "
"be? If an application works, any change in its libraries or the versions of "
"those libraries can break the application."
msgstr ""

#: ../../installing.rst:118
msgid ""
"Also, what if you can’t install :term:`packages <Distribution Package>` into "
"the global site-packages directory? For instance, on a shared host."
msgstr ""

#: ../../installing.rst:121
msgid ""
"In all these cases, virtual environments can help you. They have their own "
"installation directories and they don’t share libraries with other virtual "
"environments."
msgstr ""

#: ../../installing.rst:125
msgid ""
"Currently, there are two viable tools for creating Python virtual "
"environments:"
msgstr ""

#: ../../installing.rst:127
msgid ""
"`venv`_ is available by default in Python 3.3 and later, and installs :ref:"
"`pip` and :ref:`setuptools` into created virtual environments in Python 3.4 "
"and later."
msgstr ""

#: ../../installing.rst:130
msgid ""
":ref:`virtualenv` needs to be installed separately, but supports Python 2.6+ "
"and Python 3.3+, and :ref:`pip`, :ref:`setuptools` and :ref:`wheel` are "
"always installed into created virtual environments by default (regardless of "
"Python version)."
msgstr ""

#: ../../installing.rst:135
msgid "The basic usage is like so:"
msgstr ""

#: ../../installing.rst:145
msgid "Using `venv`_:"
msgstr ""

#: ../../installing.rst:153
msgid ""
"For more information, see the `virtualenv <http://virtualenv.pypa.io>`_ docs "
"or the `venv`_ docs."
msgstr ""

#: ../../installing.rst:158
msgid "Use pip for Installing"
msgstr ""

#: ../../installing.rst:160
msgid ""
":ref:`pip` is the recommended installer.  Below, we'll cover the most common "
"usage scenarios. For more detail, see the `pip docs <https://pip.pypa.io>`_, "
"which includes a complete `Reference Guide <https://pip.pypa.io/en/latest/"
"reference/index.html>`_."
msgstr ""

#: ../../installing.rst:165
msgid ""
"There are a few cases where you might want to use `easy_install <https://pip."
"pypa.io/en/latest/reference/index.html>`_ instead of pip.  For details, see "
"the the :ref:`pip vs easy_install` breakdown in the :doc:`Advanced Topics "
"<additional>` section."
msgstr ""

#: ../../installing.rst:172
msgid "Installing from PyPI"
msgstr ""

#: ../../installing.rst:174
msgid ""
"The most common usage of :ref:`pip` is to install from the :term:`Python "
"Package Index <Python Package Index (PyPI)>` using a :term:`requirement "
"specifier <Requirement Specifier>`. Generally speaking, a requirement "
"specifier is composed of a project name followed by an optional :term:"
"`version specifier <Version Specifier>`.  :pep:`440` contains a :pep:`full "
"specification <440#version-specifiers>` of the currently supported "
"specifiers. Below are some examples."
msgstr ""

#: ../../installing.rst:182
msgid "To install the latest version of \"SomeProject\":"
msgstr ""

#: ../../installing.rst:189
msgid "To install a specific version:"
msgstr ""

#: ../../installing.rst:196
msgid "To install greater than or equal to one version and less than another:"
msgstr ""

#: ../../installing.rst:203
msgid ""
"To install a version that's :pep:`\"compatible\" <440#compatible-release>` "
"with a certain version: [4]_"
msgstr ""

#: ../../installing.rst:210
msgid ""
"In this case, this means to install any version \"==1.4.*\" version that's "
"also \">=1.4.2\"."
msgstr ""

#: ../../installing.rst:215
msgid "Source Distributions vs Wheels"
msgstr ""

#: ../../installing.rst:217
msgid ""
":ref:`pip` can install from either :term:`Source Distributions (sdist) "
"<Source Distribution (or \"sdist\")>` or :term:`Wheels <Wheel>`, but if both "
"are present on PyPI, pip will prefer a compatible :term:`wheel <Wheel>`."
msgstr ""

#: ../../installing.rst:221
msgid ""
":term:`Wheels <Wheel>` are a pre-built :term:`distribution <Distribution "
"Package>` format that provides faster installation compared to :term:`Source "
"Distributions (sdist) <Source Distribution (or \"sdist\")>`, especially when "
"a project contains compiled extensions."
msgstr ""

#: ../../installing.rst:226
msgid ""
"If :ref:`pip` does not find a wheel to install, it will locally build a "
"wheel and cache it for future installs, instead of rebuilding the source "
"distribution in the future."
msgstr ""

#: ../../installing.rst:232
msgid "Upgrading packages"
msgstr ""

#: ../../installing.rst:234
msgid "Upgrade an already installed `SomeProject` to the latest from PyPI."
msgstr ""

#: ../../installing.rst:243
msgid "Installing to the User Site"
msgstr ""

#: ../../installing.rst:245
msgid ""
"To install :term:`packages <Distribution Package>` that are isolated to the "
"current user, use the ``--user`` flag:"
msgstr ""

#: ../../installing.rst:253
msgid ""
"For more information see the `User Installs <https://pip.readthedocs.io/en/"
"latest/user_guide.html#user-installs>`_ section from the pip docs."
msgstr ""

#: ../../installing.rst:259
msgid "Requirements files"
msgstr ""

#: ../../installing.rst:261
msgid ""
"Install a list of requirements specified in a :ref:`Requirements File <pip:"
"Requirements Files>`."
msgstr ""

#: ../../installing.rst:270
msgid "Installing from VCS"
msgstr ""

#: ../../installing.rst:272
msgid ""
"Install a project from VCS in \"editable\" mode.  For a full breakdown of "
"the syntax, see pip's section on :ref:`VCS Support <pip:VCS Support>`."
msgstr ""

#: ../../installing.rst:284
msgid "Installing from other Indexes"
msgstr ""

#: ../../installing.rst:286
msgid "Install from an alternate index"
msgstr ""

#: ../../installing.rst:293
msgid ""
"Search an additional index during install, in addition to :term:`PyPI "
"<Python Package Index (PyPI)>`"
msgstr ""

#: ../../installing.rst:303
msgid "Installing from a local src tree"
msgstr ""

#: ../../installing.rst:306
msgid ""
"Installing from local src in `Development Mode <https://setuptools."
"readthedocs.io/en/latest/setuptools.html#development-mode>`_, i.e. in such a "
"way that the project appears to be installed, but yet is still editable from "
"the src tree."
msgstr ""

#: ../../installing.rst:316
msgid "You can also install normally from src"
msgstr ""

#: ../../installing.rst:324
msgid "Installing from local archives"
msgstr ""

#: ../../installing.rst:326
msgid "Install a particular source archive file."
msgstr ""

#: ../../installing.rst:333
msgid ""
"Install from a local directory containing archives (and don't check :term:"
"`PyPI <Python Package Index (PyPI)>`)"
msgstr ""

#: ../../installing.rst:344
msgid "Installing from other sources"
msgstr ""

#: ../../installing.rst:346
msgid ""
"To install from other data sources (for example Amazon S3 storage) you can "
"create a helper application that presents the data in a :pep:`503` compliant "
"index format, and use the ``--extra-index-url`` flag to direct pip to use "
"that index."
msgstr ""

#: ../../installing.rst:358
msgid "Installing Prereleases"
msgstr ""

#: ../../installing.rst:360
msgid ""
"Find pre-release and development versions, in addition to stable versions.  "
"By default, pip only finds stable versions."
msgstr ""

#: ../../installing.rst:369
msgid "Installing Setuptools \"Extras\""
msgstr ""

#: ../../installing.rst:371
msgid "Install `setuptools extras`_."
msgstr ""

#: ../../installing.rst:383
msgid ""
"\"Secure\" in this context means using a modern browser or a tool like "
"`curl` that verifies SSL certificates when downloading from https URLs."
msgstr ""

#: ../../installing.rst:387
msgid ""
"Depending on your platform, this may require root or Administrator access. :"
"ref:`pip` is currently considering changing this by `making user installs "
"the default behavior <https://github.com/pypa/pip/issues/1668>`_."
msgstr ""

#: ../../installing.rst:392
msgid ""
"Beginning with Python 3.4, ``venv`` (a stdlib alternative to :ref:"
"`virtualenv`) will create virtualenv environments with ``pip`` pre-"
"installed, thereby making it an equal alternative to :ref:`virtualenv`."
msgstr ""

#: ../../installing.rst:397
msgid ""
"The compatible release specifier was accepted in :pep:`440` and support was "
"released in :ref:`setuptools` v8.0 and :ref:`pip` v6.0"
msgstr ""
