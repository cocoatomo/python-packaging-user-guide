# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2015, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-09 10:42+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../single_source_version.rst:5
msgid "Single-sourcing the Project Version"
msgstr ""

#: ../../single_source_version.rst:0
msgid "Page Status"
msgstr ""

#: ../../single_source_version.rst:7
msgid "Complete"
msgstr ""

#: ../../single_source_version.rst:0
msgid "Last Reviewed"
msgstr ""

#: ../../single_source_version.rst:8
msgid "2015-12-03"
msgstr ""

#: ../../single_source_version.rst:11
msgid "There are many techniques to maintain a single source of truth for the version number of your project:"
msgstr ""

#: ../../single_source_version.rst:14
msgid "Read the file in ``setup.py`` and parse the version with a regex. Example ( from `pip setup.py <https://github.com/pypa/pip/blob/1.5.6/setup.py#L33>`_)::"
msgstr ""

#: ../../single_source_version.rst:40
msgid "This technique has the disadvantage of having to deal with complexities of regular expressions."
msgstr ""

#: ../../single_source_version.rst:42
msgid "Use an external build tool that either manages updating both locations, or offers an API that both locations can use."
msgstr ""

#: ../../single_source_version.rst:45
msgid "Few tools you could use, in no particular order, and not necessarily complete: `bumpversion <https://pypi.python.org/pypi/bumpversion>`_, `changes <https://pypi.python.org/pypi/changes>`_, `zest.releaser <https://pypi.python.org/pypi/zest.releaser>`_."
msgstr ""

#: ../../single_source_version.rst:50
msgid "Set the value to a ``__version__`` global variable in a dedicated module in your project (e.g. ``version.py``), then have ``setup.py`` read and ``exec`` the value into a variable."
msgstr ""

#: ../../single_source_version.rst:54
msgid "Using ``execfile``:"
msgstr ""

#: ../../single_source_version.rst:62
msgid "Using ``exec``:"
msgstr ""

#: ../../single_source_version.rst:71
msgid "Example using this technique: `warehouse <https://github.com/pypa/warehouse/blob/master/warehouse/__about__.py>`_."
msgstr ""

#: ../../single_source_version.rst:73
msgid "Place the value in a simple ``VERSION`` text file and have both ``setup.py`` and the project code read it."
msgstr ""

#: ../../single_source_version.rst:81
msgid "An advantage with this technique is that it's not specific to Python.  Any tool can read the version."
msgstr ""

#: ../../single_source_version.rst:86
msgid "With this approach you must make sure that the ``VERSION`` file is included in all your source and binary distributions (e.g. add ``include VERSION`` to your ``MANIFEST.in``)."
msgstr ""

#: ../../single_source_version.rst:90
msgid "Set the value in ``setup.py``, and have the project code use the ``pkg_resources`` API."
msgstr ""

#: ../../single_source_version.rst:98
msgid "Be aware that the ``pkg_resources`` API only knows about what's in the installation metadata, which is not necessarily the code that's currently imported."
msgstr ""

#: ../../single_source_version.rst:103
msgid "Set the value to ``__version__`` in ``sample/__init__.py`` and import ``sample`` in ``setup.py``."
msgstr ""

#: ../../single_source_version.rst:115
msgid "Although this technique is common, beware that it will fail if ``sample/__init__.py`` imports packages from ``install_requires`` dependencies, which will very likely not be installed yet when ``setup.py`` is run."
msgstr ""

#: ../../single_source_version.rst:121
msgid "Keep the version number in the tags of a version control system (Git, Mercurial, etc) instead of in the code, and automatically extract it from there using `setuptools_scm <https://pypi.python.org/pypi/setuptools_scm>`_."
msgstr ""

