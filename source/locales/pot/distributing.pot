# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2017, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 06:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../distributing.rst:3
msgid "Packaging and Distributing Projects"
msgstr ""

#: ../../distributing.rst:0
msgid "Page Status"
msgstr ""

#: ../../distributing.rst:5
msgid "Complete"
msgstr ""

#: ../../distributing.rst:0
msgid "Last Reviewed"
msgstr ""

#: ../../distributing.rst:6
msgid "2015-09-08"
msgstr ""

#: ../../distributing.rst:8
msgid "This section covers the basics of how to configure, package and distribute your own Python projects.  It assumes that you are already familiar with the contents of the :doc:`installing` page."
msgstr ""

#: ../../distributing.rst:12
msgid "The section does *not* aim to cover best practices for Python project development as a whole.  For example, it does not provide guidance or tool recommendations for version control, documentation, or testing."
msgstr ""

#: ../../distributing.rst:16
msgid "For more reference material, see `Building and Distributing Packages <https://setuptools.readthedocs.io/en/latest/setuptools.html>`_ in the :ref:`setuptools` docs, but note that some advisory content there may be outdated. In the event of conflicts, prefer the advice in the Python Packaging User Guide."
msgstr ""

#: ../../distributing.rst:27
msgid "Requirements for Packaging and Distributing"
msgstr ""

#: ../../distributing.rst:29
msgid "First, make sure you have already fulfilled the :ref:`requirements for installing packages <installing_requirements>`."
msgstr ""

#: ../../distributing.rst:32
msgid "Install \"twine\" [1]_:"
msgstr ""

#: ../../distributing.rst:38
msgid "You'll need this to upload your project :term:`distributions <Distribution Package>` to :term:`PyPI <Python Package Index (PyPI)>` (see :ref:`below <Uploading your Project to PyPI>`)."
msgstr ""

#: ../../distributing.rst:44
msgid "Configuring your Project"
msgstr ""

#: ../../distributing.rst:48
msgid "Initial Files"
msgstr ""

#: ../../distributing.rst:51
msgid "setup.py"
msgstr ""

#: ../../distributing.rst:53
msgid "The most important file is \"setup.py\" which exists at the root of your project directory. For an example, see the `setup.py <https://github.com/pypa/sampleproject/blob/master/setup.py>`_ in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../distributing.rst:58
msgid "\"setup.py\" serves two primary functions:"
msgstr ""

#: ../../distributing.rst:60
msgid "It's the file where various aspects of your project are configured. The primary feature of ``setup.py`` is that it contains a global ``setup()`` function.  The keyword arguments to this function are how specific details of your project are defined.  The most relevant arguments are explained in :ref:`the section below <setup() args>`."
msgstr ""

#: ../../distributing.rst:66
msgid "It's the command line interface for running various commands that relate to packaging tasks. To get a listing of available commands, run ``python setup.py --help-commands``."
msgstr ""

#: ../../distributing.rst:72
msgid "setup.cfg"
msgstr ""

#: ../../distributing.rst:74
msgid "\"setup.cfg\" is an ini file that contains option defaults for ``setup.py`` commands.  For an example, see the `setup.cfg <https://github.com/pypa/sampleproject/blob/master/setup.cfg>`_ in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../distributing.rst:81
msgid "README.rst"
msgstr ""

#: ../../distributing.rst:83
msgid "All projects should contain a readme file that covers the goal of the project. The most common format is `reStructuredText <http://docutils.sourceforge.net/rst.html>`_ with an \"rst\" extension, although this is not a requirement."
msgstr ""

#: ../../distributing.rst:88
msgid "For an example, see `README.rst <https://github.com/pypa/sampleproject/blob/master/README.rst>`_ from the `PyPA sample project <https://github.com/pypa/sampleproject>`_"
msgstr ""

#: ../../distributing.rst:93
msgid "MANIFEST.in"
msgstr ""

#: ../../distributing.rst:95
msgid "A \"MANIFEST.in\" is needed in certain cases where you need to package additional files that ``python setup.py sdist (or bdist_wheel)`` don't automatically include. To see a list of what's included by default, see the `Specifying the files to distribute <https://docs.python.org/3.4/distutils/sourcedist.html#specifying-the-files-to-distribute>`_ section from the :ref:`distutils` documentation."
msgstr ""

#: ../../distributing.rst:102
msgid "For an example, see the `MANIFEST.in <https://github.com/pypa/sampleproject/blob/master/MANIFEST.in>`_ from the `PyPA sample project <https://github.com/pypa/sampleproject>`_"
msgstr ""

#: ../../distributing.rst:107
msgid "For details on writing a ``MANIFEST.in`` file, see the `The MANIFEST.in template <https://docs.python.org/2/distutils/sourcedist.html#the-manifest-in-template>`_ section from the :ref:`distutils` documentation."
msgstr ""

#: ../../distributing.rst:113
msgid "<your package>"
msgstr ""

#: ../../distributing.rst:115
msgid "Although it's not required, the most common practice is to include your python modules and packages under a single top-level package that has the same :ref:`name <setup() name>` as your project, or something very close."
msgstr ""

#: ../../distributing.rst:119
msgid "For an example, see the `sample <https://github.com/pypa/sampleproject/tree/master/sample>`_ package that's include in the `PyPA sample project <https://github.com/pypa/sampleproject>`_"
msgstr ""

#: ../../distributing.rst:127
msgid "setup() args"
msgstr ""

#: ../../distributing.rst:129
msgid "As mentioned above, The primary feature of ``setup.py`` is that it contains a global ``setup()`` function.  The keyword arguments to this function are how specific details of your project are defined."
msgstr ""

#: ../../distributing.rst:133
msgid "The most relevant arguments are explained below. The snippets given are taken from the `setup.py <https://github.com/pypa/sampleproject/blob/master/setup.py>`_ contained in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../distributing.rst:142
msgid "name"
msgstr ""

#: ../../distributing.rst:148
msgid "This is the name of your project, and will determine how your project is listed on :term:`PyPI <Python Package Index (PyPI)>`. For details on permitted characters, see the :pep:`name <426#name>` section from :pep:`426`."
msgstr ""

#: ../../distributing.rst:155
msgid "version"
msgstr ""

#: ../../distributing.rst:161
msgid "This is the current version of your project, allowing your users to determine whether or not they have the latest version, and to indicate which specific versions they've tested their own software against."
msgstr ""

#: ../../distributing.rst:165
msgid "Versions are displayed on :term:`PyPI <Python Package Index (PyPI)>` for each release if you publish your project."
msgstr ""

#: ../../distributing.rst:168
msgid "See :ref:`Choosing a versioning scheme` for more information on ways to use versions to convey compatibility information to your users."
msgstr ""

#: ../../distributing.rst:171
msgid "If the project code itself needs run-time access to the version, the simplest way is to keep the version in both ``setup.py`` and your code. If you'd rather not duplicate the value, there are a few ways to manage this. See the \":ref:`Single sourcing the version`\" Advanced Topics section."
msgstr ""

#: ../../distributing.rst:178
msgid "description"
msgstr ""

#: ../../distributing.rst:185
msgid "Give a short and long description for you project.  These values will be displayed on :term:`PyPI <Python Package Index (PyPI)>` if you publish your project."
msgstr ""

#: ../../distributing.rst:191
msgid "url"
msgstr ""

#: ../../distributing.rst:198
msgid "Give a homepage url for your project."
msgstr ""

#: ../../distributing.rst:202
msgid "author"
msgstr ""

#: ../../distributing.rst:209
msgid "Provide details about the author."
msgstr ""

#: ../../distributing.rst:213
msgid "license"
msgstr ""

#: ../../distributing.rst:219
msgid "Provide the type of license you are using."
msgstr ""

#: ../../distributing.rst:223
msgid "classifiers"
msgstr ""

#: ../../distributing.rst:252
msgid "Provide a list of classifiers that categorize your project. For a full listing, see https://pypi.python.org/pypi?%3Aaction=list_classifiers."
msgstr ""

#: ../../distributing.rst:257
msgid "keywords"
msgstr ""

#: ../../distributing.rst:263
msgid "List keywords that describe your project."
msgstr ""

#: ../../distributing.rst:267
msgid "packages"
msgstr ""

#: ../../distributing.rst:274
msgid "It's required to list the :term:`packages <Import Package>` to be included in your project.  Although they can be listed manually, ``setuptools.find_packages`` finds them automatically.  Use the ``exclude`` keyword argument to omit packages that are not intended to be released and installed."
msgstr ""

#: ../../distributing.rst:282
msgid "install_requires"
msgstr ""

#: ../../distributing.rst:288
msgid "\"install_requires\" should be used to specify what dependencies a project minimally needs to run. When the project is installed by :ref:`pip`, this is the specification that is used to install its dependencies."
msgstr ""

#: ../../distributing.rst:292
msgid "For more on using \"install_requires\" see :ref:`install_requires vs Requirements files`."
msgstr ""

#: ../../distributing.rst:298
msgid "package_data"
msgstr ""

#: ../../distributing.rst:307
msgid "Often, additional files need to be installed into a :term:`package <Import Package>`. These files are often data thatâ€™s closely related to the packageâ€™s implementation, or text files containing documentation that might be of interest to programmers using the package. These files are called \"package data\"."
msgstr ""

#: ../../distributing.rst:312
msgid "The value must be a mapping from package name to a list of relative path names that should be copied into the package. The paths are interpreted as relative to the directory containing the package."
msgstr ""

#: ../../distributing.rst:316
msgid "For more information, see `Including Data Files <https://setuptools.readthedocs.io/en/latest/setuptools.html#including-data-files>`_ from the `setuptools docs <https://setuptools.readthedocs.io>`_."
msgstr ""

#: ../../distributing.rst:324
msgid "data_files"
msgstr ""

#: ../../distributing.rst:330
msgid "Although configuring :ref:`Package Data` is sufficient for most needs, in some cases you may need to place data files *outside* of your :term:`packages <Import Package>`.  The ``data_files`` directive allows you to do that."
msgstr ""

#: ../../distributing.rst:334
msgid "Each (directory, files) pair in the sequence specifies the installation directory and the files to install there. If directory is a relative path, it is interpreted relative to the installation prefix (Pythonâ€™s sys.prefix for pure-Python :term:`distributions <Distribution Package>`, sys.exec_prefix for distributions that contain extension modules). Each file name in files is interpreted relative to the ``setup.py`` script at the top of the project source distribution."
msgstr ""

#: ../../distributing.rst:342
msgid "For more information see the distutils section on `Installing Additional Files <http://docs.python.org/3.4/distutils/setupscript.html#installing-additional-files>`_."
msgstr ""

#: ../../distributing.rst:347
msgid ":ref:`setuptools` allows absolute \"data_files\" paths, and pip honors them as absolute, when installing from :term:`sdist <Source Distribution (or \"sdist\")>`.  This is not true when installing from :term:`wheel` distributions. Wheels don't support absolute paths, and they end up being installed relative to \"site-packages\".  For discussion see `wheel Issue #92 <https://bitbucket.org/pypa/wheel/issue/92>`_."
msgstr ""

#: ../../distributing.rst:356
msgid "scripts"
msgstr ""

#: ../../distributing.rst:358
msgid "Although ``setup()`` supports a `scripts <http://docs.python.org/3.4/distutils/setupscript.html#installing-scripts>`_ keyword for pointing to pre-made scripts to install, the recommended approach to achieve cross-platform compatibility is to use :ref:`console_scripts` entry points (see below)."
msgstr ""

#: ../../distributing.rst:366
msgid "entry_points"
msgstr ""

#: ../../distributing.rst:375
msgid "Use this keyword to specify any plugins that your project provides for any named entry points that may be defined by your project or others that you depend on."
msgstr ""

#: ../../distributing.rst:378
msgid "For more information, see the section on `Dynamic Discovery of Services and Plugins <https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins>`_ from the :ref:`setuptools` docs."
msgstr ""

#: ../../distributing.rst:383
msgid "The most commonly used entry point is \"console_scripts\" (see below)."
msgstr ""

#: ../../distributing.rst:388
msgid "console_scripts"
msgstr ""

#: ../../distributing.rst:398
msgid "Use \"console_script\" `entry points <https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins>`_ to register your script interfaces. You can then let the toolchain handle the work of turning these interfaces into actual scripts [2]_.  The scripts will be generated during the install of your :term:`distribution <Distribution Package>`."
msgstr ""

#: ../../distributing.rst:405
msgid "For more information, see `Automatic Script Creation <https://setuptools.readthedocs.io/en/latest/setuptools.html#automatic-script-creation>`_ from the `setuptools docs <https://setuptools.readthedocs.io>`_."
msgstr ""

#: ../../distributing.rst:412
msgid "Choosing a versioning scheme"
msgstr ""

#: ../../distributing.rst:415
msgid "Standards compliance for interoperability"
msgstr ""

#: ../../distributing.rst:417
msgid "Different Python projects may use different versioning schemes based on the needs of that particular project, but all of them are required to comply with the flexible :pep:`public version scheme <440#public-version-identifiers>` specified in :pep:`440` in order to be supported in tools and libraries like ``pip`` and ``setuptools``."
msgstr ""

#: ../../distributing.rst:423
msgid "Here are some examples of compliant version numbers::"
msgstr ""

#: ../../distributing.rst:434
msgid "To further accommodate historical variations in approaches to version numbering, :pep:`440` also defines a comprehensive technique for :pep:`version normalisation <440#normalization>` that maps variant spellings of different version numbers to a standardised canonical form."
msgstr ""

#: ../../distributing.rst:440
msgid "Scheme choices"
msgstr ""

#: ../../distributing.rst:443
msgid "Semantic versioning (preferred)"
msgstr ""

#: ../../distributing.rst:445
msgid "For new projects, the recommended versioning scheme is based on `Semantic Versioning <http://semver.org>`_, but adopts a different approach to handling pre-releases and build metadata."
msgstr ""

#: ../../distributing.rst:449
msgid "The essence of semantic versioning is a 3-part MAJOR.MINOR.MAINTENANCE numbering scheme, where the project author increments:"
msgstr ""

#: ../../distributing.rst:452
msgid "MAJOR version when they make incompatible API changes,"
msgstr ""

#: ../../distributing.rst:453
msgid "MINOR version when they add functionality in a backwards-compatible manner, and"
msgstr ""

#: ../../distributing.rst:454
msgid "MAINTENANCE version when they make backwards-compatible bug fixes."
msgstr ""

#: ../../distributing.rst:456
msgid "Adopting this approach as a project author allows users to make use of :pep:`\"compatible release\" <440#compatible-release>` specifiers, where ``name ~= X.Y`` requires at least release X.Y, but also allows any later release with a matching MAJOR version."
msgstr ""

#: ../../distributing.rst:461
msgid "Python projects adopting semantic versioning should abide by clauses 1-8 of the `Semantic Versioning 2.0.0 specification <http://semver.org>`_."
msgstr ""

#: ../../distributing.rst:465
msgid "Date based versioning"
msgstr ""

#: ../../distributing.rst:467
msgid "Semantic versioning is not a suitable choice for all projects, such as those with a regular time based release cadence and a deprecation process that provides warnings for a number of releases prior to removal of a feature."
msgstr ""

#: ../../distributing.rst:471
msgid "A key advantage of date based versioning is that it is straightforward to tell how old the base feature set of a particular release is given just the version number."
msgstr ""

#: ../../distributing.rst:474
msgid "Version numbers for date based projects typically take the form of YEAR.MONTH (for example, ``12.04``, ``15.10``)."
msgstr ""

#: ../../distributing.rst:478
msgid "Serial versioning"
msgstr ""

#: ../../distributing.rst:480
msgid "This is the simplest possible versioning scheme, and consists of a single number which is incremented every release."
msgstr ""

#: ../../distributing.rst:483
msgid "While serial versioning is very easy to manage as a developer, it is the hardest to track as an end user, as serial version numbers convey little or no information regarding API backwards compatibility."
msgstr ""

#: ../../distributing.rst:488
msgid "Hybrid schemes"
msgstr ""

#: ../../distributing.rst:490
msgid "Combinations of the above schemes are possible. For example, a project may combine date based versioning with serial versioning to create a YEAR.SERIAL numbering scheme that readily conveys the approximate age of a release, but doesn't otherwise commit to a particular release cadence within the year."
msgstr ""

#: ../../distributing.rst:496
msgid "Pre-release versioning"
msgstr ""

#: ../../distributing.rst:498
msgid "Regardless of the base versioning scheme, pre-releases for a given final release may be published as:"
msgstr ""

#: ../../distributing.rst:501
msgid "zero or more dev releases (denoted with a \".devN\" suffix)"
msgstr ""

#: ../../distributing.rst:502
msgid "zero or more alpha releases (denoted with a \".aN\" suffix)"
msgstr ""

#: ../../distributing.rst:503
msgid "zero or more beta releases (denoted with a \".bN\" suffix)"
msgstr ""

#: ../../distributing.rst:504
msgid "zero or more release candidates (denoted with a \".rcN\" suffix)"
msgstr ""

#: ../../distributing.rst:506
msgid "``pip`` and other modern Python package installers ignore pre-releases by default when deciding which versions of dependencies to install."
msgstr ""

#: ../../distributing.rst:511
msgid "Local version identifiers"
msgstr ""

#: ../../distributing.rst:513
msgid "Public version identifiers are designed to support distribution via :term:`PyPI <Python Package Index (PyPI)>`. Python's software distribution tools also support the notion of a :pep:`local version identifier <440#local-version-identifiers>`, which can be used to identify local development builds not intended for publication, or modified variants of a release maintained by a redistributor."
msgstr ""

#: ../../distributing.rst:520
msgid "A local version identifier takes the form ``<public version identifier>+<local version label>``. For example::"
msgstr ""

#: ../../distributing.rst:528
msgid "Working in \"Development Mode\""
msgstr ""

#: ../../distributing.rst:530
msgid "Although not required, it's common to locally install your project in \"editable\" or \"develop\" mode while you're working on it.  This allows your project to be both installed and editable in project form."
msgstr ""

#: ../../distributing.rst:534
msgid "Assuming you're in the root of your project directory, then run:"
msgstr ""

#: ../../distributing.rst:541
msgid "Although somewhat cryptic, ``-e`` is short for ``--editable``, and ``.`` refers to the current working directory, so together, it means to install the current directory (i.e. your project) in editable mode.  This will also install any dependencies declared with \"install_requires\" and any scripts declared with \"console_scripts\".  Dependencies will be installed in the usual, non-editable mode."
msgstr ""

#: ../../distributing.rst:547
msgid "It's fairly common to also want to install some of your dependencies in editable mode as well. For example, supposing your project requires \"foo\" and \"bar\", but you want \"bar\" installed from vcs in editable mode, then you could construct a requirements file like so::"
msgstr ""

#: ../../distributing.rst:555
msgid "The first line says to install your project and any dependencies. The second line overrides the \"bar\" dependency, such that it's fulfilled from vcs, not PyPI."
msgstr ""

#: ../../distributing.rst:559
msgid "If, however, you want \"bar\" installed from a local directory in editable mode, the requirements file should look like this, with the local paths at the top of the file::"
msgstr ""

#: ../../distributing.rst:564
msgid "Otherwise, the dependency will be fulfilled from PyPI, due to the installation order of the requirements file.  For more on requirements files, see the :ref:`Requirements File <pip:Requirements Files>` section in the pip docs.  For more on vcs installs, see the :ref:`VCS Support <pip:VCS Support>` section of the pip docs."
msgstr ""

#: ../../distributing.rst:568
msgid "Lastly, if you don't want to install any dependencies at all, you can run::"
msgstr ""

#: ../../distributing.rst:573
msgid "For more information, see the `Development Mode <https://setuptools.readthedocs.io/en/latest/setuptools.html#development-mode>`_ section of the `setuptools docs <https://setuptools.readthedocs.io>`_."
msgstr ""

#: ../../distributing.rst:580
msgid "Packaging your Project"
msgstr ""

#: ../../distributing.rst:582
msgid "To have your project installable from a :term:`Package Index` like :term:`PyPI <Python Package Index (PyPI)>`, you'll need to create a :term:`Distribution <Distribution Package>` (aka \":term:`Package <Distribution Package>`\" ) for your project."
msgstr ""

#: ../../distributing.rst:590
msgid "Source Distributions"
msgstr ""

#: ../../distributing.rst:592
msgid "Minimally, you should create a :term:`Source Distribution <Source Distribution (or \"sdist\")>`:"
msgstr ""

#: ../../distributing.rst:600
msgid "A \"source distribution\" is unbuilt (i.e, it's not a :term:`Built Distribution`), and requires a build step when installed by pip.  Even if the distribution is pure python (i.e. contains no extensions), it still involves a build step to build out the installation metadata from ``setup.py``."
msgstr ""

#: ../../distributing.rst:607
msgid "Wheels"
msgstr ""

#: ../../distributing.rst:609
msgid "You should also create a wheel for your project. A wheel is a :term:`built package <Built Distribution>` that can be installed without needing to go through the \"build\" process. Installing wheels is substantially faster for the end user than installing from a source distribution."
msgstr ""

#: ../../distributing.rst:614
msgid "If your project is pure python (i.e. contains no compiled extensions) and natively supports both Python 2 and 3, then you'll be creating what's called a :ref:`\"Universal Wheel\" (see section below) <Universal Wheels>`."
msgstr ""

#: ../../distributing.rst:618
msgid "If your project is pure python but does not natively support both Python 2 and 3, then you'll be creating a :ref:`\"Pure Python Wheel\" (see section below) <Pure Python Wheels>`."
msgstr ""

#: ../../distributing.rst:622
msgid "If you project contains compiled extensions, then you'll be creating what's called a :ref:`\"Platform Wheel\" (see section below) <Platform Wheels>`."
msgstr ""

#: ../../distributing.rst:629
msgid "Universal Wheels"
msgstr ""

#: ../../distributing.rst:631
msgid "\"Universal Wheels\" are wheels that are pure python (i.e. contains no compiled extensions) and support Python 2 and 3. This is a wheel that can be installed anywhere by :ref:`pip`."
msgstr ""

#: ../../distributing.rst:635
msgid "To build a Universal Wheel:"
msgstr ""

#: ../../distributing.rst:642
msgid "You can also permanently set the ``--universal`` flag in \"setup.cfg\" (e.g., see `sampleproject/setup.cfg <https://github.com/pypa/sampleproject/blob/master/setup.cfg>`_)"
msgstr ""

#: ../../distributing.rst:652
msgid "Only use the ``--universal`` setting, if:"
msgstr ""

#: ../../distributing.rst:654
msgid "Your project runs on Python 2 and 3 with no changes (i.e. it does not require 2to3)."
msgstr ""

#: ../../distributing.rst:656
msgid "Your project does not have any C extensions."
msgstr ""

#: ../../distributing.rst:658
msgid "Beware that ``bdist_wheel`` does not currently have any checks to warn if you use the setting inappropriately."
msgstr ""

#: ../../distributing.rst:661
msgid "If your project has optional C extensions, it is recommended not to publish a universal wheel, because pip will prefer the wheel over a source installation, and prevent the possibility of building the extension."
msgstr ""

#: ../../distributing.rst:669
msgid "Pure Python Wheels"
msgstr ""

#: ../../distributing.rst:671
msgid "\"Pure Python Wheels\" that are not \"universal\" are wheels that are pure python (i.e. contains no compiled extensions), but don't natively support both Python 2 and 3."
msgstr ""

#: ../../distributing.rst:675
#: ../../distributing.rst:702
msgid "To build the wheel:"
msgstr ""

#: ../../distributing.rst:682
msgid "`bdist_wheel` will detect that the code is pure Python, and build a wheel that's named such that it's usable on any Python installation with the same major version (Python 2 or Python 3) as the version you used to build the wheel.  For details on the naming of wheel files, see :pep:`425`"
msgstr ""

#: ../../distributing.rst:687
msgid "If your code supports both Python 2 and 3, but with different code (e.g., you use `\"2to3\" <https://docs.python.org/2/library/2to3.html>`_) you can run ``setup.py bdist_wheel`` twice, once with Python 2 and once with Python 3. This will produce wheels for each version."
msgstr ""

#: ../../distributing.rst:697
msgid "Platform Wheels"
msgstr ""

#: ../../distributing.rst:699
msgid "\"Platform Wheels\" are wheels that are specific to a certain platform like linux, OSX, or Windows, usually due to containing compiled extensions."
msgstr ""

#: ../../distributing.rst:709
msgid "`bdist_wheel` will detect that the code is not pure Python, and build a wheel that's named such that it's only usable on the platform that it was built on. For details on the naming of wheel files, see :pep:`425`"
msgstr ""

#: ../../distributing.rst:715
msgid ":term:`PyPI <Python Package Index (PyPI)>` currently supports uploads of platform wheels for Windows, OS X, and the multi-distro ``manylinux1`` ABI. Details of the latter are defined in :pep:`513`."
msgstr ""

#: ../../distributing.rst:723
msgid "Uploading your Project to PyPI"
msgstr ""

#: ../../distributing.rst:727
msgid "Before releasing on main PyPI repo, you might prefer training with `PyPI test site <https://testpypi.python.org/pypi>`_ which is cleaned on a semi regular basis. See `these instructions <https://wiki.python.org/moin/TestPyPI>`_ on how to setup your configuration in order to use it."
msgstr ""

#: ../../distributing.rst:733
msgid "When you ran the command to create your distribution, a new directory dist/ was created under your project's root directory. That's where you'll find your distribution file(s) to upload."
msgstr ""

#: ../../distributing.rst:736
msgid "Create an account"
msgstr ""

#: ../../distributing.rst:738
msgid "First, you need a :term:`PyPI <Python Package Index (PyPI)>` user account. There are two options:"
msgstr ""

#: ../../distributing.rst:741
msgid "Create an account manually `using the form on the PyPI website <https://pypi.python.org/pypi?%3Aaction=register_form>`_."
msgstr ""

#: ../../distributing.rst:744
msgid "**(Not recommended):** Have an account created as part of registering your first project (not recommended due to the related security concerns, see option #3 below)."
msgstr ""

#: ../../distributing.rst:748
msgid "If you created your account using option #1 (the form), you'll need to manually write a ``~/.pypirc`` file like so."
msgstr ""

#: ../../distributing.rst:761
msgid "You can leave out the password line if you use twine with its ``-p PASSWORD`` argument or prefer to simply enter your password when prompted."
msgstr ""

#: ../../distributing.rst:767
msgid "Register your project"
msgstr ""

#: ../../distributing.rst:769
msgid "Next, if this is the first release, you currently need to explicitly register your project prior to uploading."
msgstr ""

#: ../../distributing.rst:772
msgid "There are three ways to do this:"
msgstr ""

#: ../../distributing.rst:774
msgid "Use `the form on the PyPI website <https://pypi.python.org/pypi?%3Aaction=submit_form>`_, to upload your ``PKG-INFO`` info located in your local project tree at ``myproject.egg-info/PKG-INFO``.  If you don't have that file or directory, then run ``python setup.py egg_info`` to have it generated."
msgstr ""

#: ../../distributing.rst:779
msgid "Run ``twine register dist/mypkg.whl``, and :ref:`twine` will register your project based on the package metadata in the specified files. Your ``~/.pypirc`` must already be appropriately configured for twine to work."
msgstr ""

#: ../../distributing.rst:782
msgid "**(Not recommended):** Run ``python setup.py register``.  If you don't have a user account already, a wizard will create one for you. This approach is covered here due to it being mentioned in other guides, but it is not recommended as it may use a plaintext HTTP or unverified HTTPS connection on some Python versions, allowing your username and password to be intercepted during transmission."
msgstr ""

#: ../../distributing.rst:791
msgid "Upload your distributions"
msgstr ""

#: ../../distributing.rst:793
msgid "Finally, you can upload your distributions to :term:`PyPI <Python Package Index (PyPI)>`."
msgstr ""

#: ../../distributing.rst:796
msgid "There are two options:"
msgstr ""

#: ../../distributing.rst:798
msgid "Use :ref:`twine`"
msgstr ""

#: ../../distributing.rst:804
msgid "The biggest reason to use twine is that ``python setup.py upload`` (option #2 below) uploads files over plaintext. This means anytime you use it you expose your username and password to a MITM attack. Twine uses only verified TLS to upload to PyPI in order to protect your credentials from theft."
msgstr ""

#: ../../distributing.rst:809
msgid "Secondly it allows you to precreate your distribution files.  ``python setup.py upload`` only allows you to upload something that you've created in the same command invocation. This means that you cannot test the exact file you're going to upload to PyPI to ensure that it works before uploading it."
msgstr ""

#: ../../distributing.rst:814
msgid "Finally it allows you to pre-sign your files and pass the .asc files into the command line invocation (``twine upload twine-1.0.1.tar.gz twine-1.0.1.tar.gz.asc``). This enables you to be assured that you're typing your gpg passphrase into gpg itself and not anything else since *you* will be the one directly executing ``gpg --detach-sign -a <filename>``."
msgstr ""

#: ../../distributing.rst:821
msgid "**(Not recommended):** Use :ref:`setuptools`:"
msgstr ""

#: ../../distributing.rst:827
msgid "This approach is covered here due to it being mentioned in other guides, but it is not recommended as it may use a plaintext HTTP or unverified HTTPS connection on some Python versions, allowing your username and password to be intercepted during transmission."
msgstr ""

#: ../../distributing.rst:834
msgid "Depending on your platform, this may require root or Administrator access. :ref:`pip` is currently considering changing this by `making user installs the default behavior <https://github.com/pypa/pip/issues/1668>`_."
msgstr ""

#: ../../distributing.rst:840
msgid "Specifically, the \"console_script\" approach generates ``.exe`` files on Windows, which are necessary because the OS special-cases ``.exe`` files. Script-execution features like ``PATHEXT`` and the :pep:`Python Launcher for Windows <397>` allow scripts to be used in many cases, but not all."
msgstr ""

