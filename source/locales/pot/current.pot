# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2017, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 06:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../current.rst:5
msgid "Tool Recommendations"
msgstr ""

#: ../../current.rst:0
msgid "Page Status"
msgstr ""

#: ../../current.rst:7
msgid "Complete"
msgstr ""

#: ../../current.rst:0
msgid "Last Reviewed"
msgstr ""

#: ../../current.rst:8
msgid "2016-06-24"
msgstr ""

#: ../../current.rst:10
msgid "If you're familiar with Python packaging and installation, and just want to know what tools are currently recommended, then here it is."
msgstr ""

#: ../../current.rst:15
msgid "Installation Tool Recommendations"
msgstr ""

#: ../../current.rst:17
msgid "Use :ref:`pip` to install Python :term:`packages <Distribution Package>` from :term:`PyPI <Python Package Index (PyPI)>`. [1]_ [2]_ Depending on how :ref:`pip` is installed, you may need to also install :ref:`wheel` to get the benefit of wheel caching. [3]_"
msgstr ""

#: ../../current.rst:22
msgid "Use :ref:`virtualenv`, or `venv`_ to isolate application specific dependencies from a shared Python installation. [4]_"
msgstr ""

#: ../../current.rst:25
msgid "If you're looking for management of fully integrated cross-platform software stacks, consider:"
msgstr ""

#: ../../current.rst:28
msgid ":ref:`buildout`: primarily focused on the web development community"
msgstr ""

#: ../../current.rst:30
msgid ":ref:`spack`, :ref:`hashdist`, or :ref:`conda`: primarily focused on the scientific community."
msgstr ""

#: ../../current.rst:36
msgid "Packaging Tool Recommendations"
msgstr ""

#: ../../current.rst:38
msgid "Use :ref:`setuptools` to define projects and create :term:`Source Distributions <Source Distribution (or \"sdist\")>`. [5]_ [6]_"
msgstr ""

#: ../../current.rst:41
msgid "Use the ``bdist_wheel`` :ref:`setuptools` extension available from the :ref:`wheel project <wheel>` to create :term:`wheels <Wheel>`.  This is especially beneficial, if your project contains binary extensions. [7]_"
msgstr ""

#: ../../current.rst:45
msgid "Use `twine <https://pypi.python.org/pypi/twine>`_ for uploading distributions to :term:`PyPI <Python Package Index (PyPI)>`."
msgstr ""

#: ../../current.rst:51
msgid "There are some cases where you might choose to use ``easy_install`` (from :ref:`setuptools`), e.g. if you need to install from :term:`Eggs <Egg>` (which pip doesn't support).  For a detailed breakdown, see :ref:`pip vs easy_install`."
msgstr ""

#: ../../current.rst:56
msgid "The acceptance of :pep:`453` means that :ref:`pip` will be available by default in most installations of Python 3.4 or later.  See the :pep:`rationale section <453#rationale>` from :pep:`453` as for why pip was chosen."
msgstr ""

#: ../../current.rst:61
msgid ":ref:`get-pip.py <pip:get-pip>` and :ref:`virtualenv` install :ref:`wheel`, whereas :ref:`ensurepip` and :ref:`venv <venv>` do not currently.  Also, the common \"python-pip\" package that's found in various linux distros, does not depend on \"python-wheel\" currently."
msgstr ""

#: ../../current.rst:66
msgid "Beginning with Python 3.4, ``venv`` will create virtualenv environments with ``pip`` installed, thereby making it an equal alternative to :ref:`virtualenv`. However, using :ref:`virtualenv` will still be recommended for users that need cross-version consistency."
msgstr ""

#: ../../current.rst:71
msgid "Although you can use pure ``distutils`` for many projects, it does not support defining dependencies on other projects and is missing several convenience utilities for automatically populating distribution metadata correctly that are provided by ``setuptools``. Being outside the standard library, ``setuptools`` also offers a more consistent feature set across different versions of Python, and (unlike ``distutils``), ``setuptools`` will be updated to produce the upcoming \"Metadata 2.0\" standard formats on all supported versions."
msgstr ""

#: ../../current.rst:80
msgid "Even for projects that do choose to use ``distutils``, when :ref:`pip` installs such projects directly from source (rather than installing from a prebuilt :term:`wheel <Wheel>` file), it will actually build your project using :ref:`setuptools` instead."
msgstr ""

#: ../../current.rst:85
msgid "`distribute`_ (a fork of setuptools) was merged back into :ref:`setuptools` in June 2013, thereby making setuptools the default choice for packaging."
msgstr ""

#: ../../current.rst:89
msgid ":term:`PyPI <Python Package Index (PyPI)>` currently only allows uploading Windows and Mac OS X wheels, and they should be compatible with the binary installers provided for download from python.org. Enhancements will have to be made to the :pep:`wheel compatibility tagging scheme <425>` before linux wheels will be allowed."
msgstr ""

